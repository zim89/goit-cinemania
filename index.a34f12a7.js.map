{"mappings":"oeAAAA,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,yUCAzDH,EAAA,S,iCCAA,IAAAI,EAAAJ,EAAA,S,aCAAK,EAAAL,EAAA,S,aAGO,MAAMM,EAAeC,IAC1B,IAAIC,EAGCA,EADLC,OAAOC,WAAa,KACH,EAAAL,EAAAM,gBACA,EAAAN,EAAAM,aAAY,GAM7B,OAJeH,EACZI,KAAIC,IAAS,EAAAC,EAAAC,iBAAgBR,EAAOM,MACpCG,KAAK,GAEK,E,8BDWf,SAASC,EAAsBC,GAC7B,MAAMC,EAAYD,EAAEE,OAAOC,QAAQ,mBACnC,IAAKF,EAAW,OAChB,MAAMG,EAAUH,EAAUI,QAAQD,SAClC,EAAAE,EAAAC,oBAAmBH,E,CAtBqBI,WACxC,IACEtB,EAAAuB,QAAQC,SAAS,aAAc,CAC7BC,UAAW,eACXC,gBAAiB,kBACjBC,SAAU,sBAEZ,MAAMC,QAAEA,SAAkB,EAAAC,EAAAC,6BAC1BC,EAAAC,KAAKC,UAAUC,UAAYhC,EAAa0B,GACxCG,EAAAC,KAAKC,UAAUE,iBAAiB,QAAStB,E,CACzC,MAAOuB,GACPC,QAAQC,IAAI,wCAAwCF,I,CAErD,QACCpC,EAAAuB,QAAQgB,Q,GAWZC,GEhCAxC,EAAAJ,EAAA,S,aAAA,I,ECAA6C,EAAA7C,EAAA,SCAA8C,EAAiB,IAAAC,IAAoB/C,EAAA,SAAAgD,QAA6C,SAAQC,OAAAC,KAAAC,KAAEC,W,MCA5FC,EAAiB,IAAAN,IAAoB/C,EAAA,SAAAgD,QAA6C,SAAQC,OAAAC,KAAAC,KAAEC,W,MCA5FE,EAAiB,IAAAP,IAAoB/C,EAAA,SAAAgD,QAA6C,SAAQC,OAAAC,KAAAC,KAAEC,WHErF,MAAMG,EAAiBC,IAC5B,MAAMC,GACJA,EAAEC,MACFA,EAAKC,eACLA,EAAcC,aACdA,EAAYC,WACZA,EAAUC,WACVA,EAAUC,SACVA,EAAQC,UACRA,EAASC,YACTA,EAAWC,cACXA,EAAaC,aACbA,GACEX,EACJ,IAAIY,EAEJ,MAAMC,GAAS,EAAAxB,EAAAyB,eAAcN,GAAWhD,KAAK,MAGxCoD,EADL3D,OAAOC,WAAa,IACH,mCAAmCuD,IACnC,uCAAuCC,IAEnDD,GAAgBC,IACfzD,OAAOC,WAAa,MACtB0D,EAAS,IAAArB,IAAAD,IAMPrC,OAAOC,YAAc,KAAOD,OAAOC,WAAa,OAClD0D,EAAS,IAAArB,IAAAM,IAMP5C,OAAOC,YAAc,OACvB0D,EAAS,IAAArB,IAAAO,KA2Db,MApDe,iFAE0Bc,WACvCV,GAASC,8FAKyBD,GAASC,8OAOLQ,EAAaI,MAAM,EAAG,8NAM9CX,EAAaY,QAAQ,6GAIrBX,gQAQyBC,EAAWU,QAAQ,mKAInBH,sLAOPN,gFAGoBN,iGAKzC,E,2CD3FqB/B,WAClC,MAAMb,GAAQ,EAAAR,EAAAM,eAAc,GAE5B,IACEP,EAAAuB,QAAQC,SAAS,aAAc,CAC7BE,gBAAiB,kBACjBC,SAAU,sBAEZ,MAAMC,QAAEA,SAAkB,EAAAC,EAAAwC,uBAC1BtC,EAAAC,KAAKsC,kBAAkBpC,UAAYiB,EAAevB,EAAQnB,IAC1D,MAAM8D,EAAcC,SAASC,cAAc,mBAC3C,EAAAC,EAAAC,qBAAoBJ,E,CACpB,MAAOnC,GACPC,QAAQC,IAAI,kBAAkBF,I,CAC/B,QACCpC,EAAAuB,QAAQgB,Q,GAIZqC","sources":["node_modules/@parcel/runtime-js/lib/runtime-3b7dcaa48b392aaa.js","src/index.js","src/js/partials/trends.js","src/js/markup/trendsMarkup.js","src/js/partials/upcoming.js","src/js/markup/upcomingMarkup.js","node_modules/@parcel/runtime-js/lib/runtime-e1dfba9d31fa2bc1.js","node_modules/@parcel/runtime-js/lib/runtime-3a229852aff36c5a.js","node_modules/@parcel/runtime-js/lib/runtime-dde3cccea3dacf7a.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"5ZPII\\\":\\\"index.a34f12a7.js\\\",\\\"7x1mF\\\":\\\"default-movie-img@2x.632a332c.png\\\",\\\"fGxZZ\\\":\\\"default-movie-img@2x.7db60484.png\\\",\\\"4W3Ib\\\":\\\"default-movie-img@2x.2bd481c5.png\\\",\\\"5UbS1\\\":\\\"catalog.bc6dabe6.css\\\",\\\"7adTC\\\":\\\"library.15a136b5.js\\\"}\"));","import './js/utils/active-page';\nimport './js/utils/go-top-btn';\nimport './js/utils/mobile-menu';\n// import './js/utils/theme-switcher';\n\nimport './js/partials/hero';\nimport './js/partials/trends';\nimport './js/partials/upcoming';\n","import { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nimport { fetchTrendingMoviesByWeek } from '../services/fetch-api';\nimport { trendsMarkup } from '../markup/trendsMarkup';\nimport { openMovieInfoModal } from '../utils/modal.js';\nimport { refs } from '../refs.js';\n\nexport const renderTrendingMoviesByWeek = async () => {\n  try {\n    Loading.standard('Loading...', {\n      className: 'hero-loading',\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      svgColor: 'rgb(248, 119, 25)',\n    });\n    const { results } = await fetchTrendingMoviesByWeek();\n    refs.movieList.innerHTML = trendsMarkup(results);\n    refs.movieList.addEventListener('click', handlerMovieListClick);\n  } catch (error) {\n    console.log(`Error in renderTrendingMoviesByWeek: ${error}`);\n    // FIXME: add default cards\n  } finally {\n    Loading.remove();\n  }\n};\n\nfunction handlerMovieListClick(e) {\n  const closestId = e.target.closest('[data-movie-id]');\n  if (!closestId) return;\n  const movieId = closestId.dataset.movieId;\n  openMovieInfoModal(movieId);\n}\n\nrenderTrendingMoviesByWeek();\n","import { randomIndex } from '../utils/random-index';\nimport { movieListMarkup } from './movieListMarkup';\n\nexport const trendsMarkup = movies => {\n  let indexList;\n\n  window.innerWidth < 768\n    ? (indexList = randomIndex())\n    : (indexList = randomIndex(3));\n\n  const markup = indexList\n    .map(index => movieListMarkup(movies[index]))\n    .join('');\n\n  return markup;\n};\n","import { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nimport { fetchUpcomingMovies } from '../services/fetch-api';\nimport { upcomingMarkup } from '../markup/upcomingMarkup';\nimport { initAddToLibraryBtn } from '../utils/ad-btn';\nimport { randomIndex } from '../utils/random-index';\nimport { refs } from '../refs.js';\n\nexport const renderUpcomingMovies = async () => {\n  const index = randomIndex()[0];\n\n  try {\n    Loading.standard('Loading...', {\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      svgColor: 'rgb(248, 119, 25)',\n    });\n    const { results } = await fetchUpcomingMovies();\n    refs.upcomingContainer.innerHTML = upcomingMarkup(results[index]);\n    const upcomingBtn = document.querySelector('.upcoming .btn');\n    initAddToLibraryBtn(upcomingBtn);\n  } catch (error) {\n    console.log(`upcomingError: ${error}`);\n  } finally {\n    Loading.remove();\n  }\n};\n\nrenderUpcomingMovies();\n","import { getGenreNames } from '../utils/genre-names';\n\nexport const upcomingMarkup = movie => {\n  const {\n    id,\n    title,\n    original_title,\n    vote_average,\n    vote_count,\n    popularity,\n    overview,\n    genre_ids,\n    poster_path,\n    backdrop_path,\n    release_date,\n  } = movie;\n  let posterUrl;\n\n  const genres = getGenreNames(genre_ids).join(', ');\n\n  window.innerWidth < 768\n    ? (posterUrl = `https://image.tmdb.org/t/p/w500/${poster_path}`)\n    : (posterUrl = `https://image.tmdb.org/t/p/original/${backdrop_path}`);\n\n  if (!poster_path || !backdrop_path) {\n    if (window.innerWidth < 768) {\n      posterUrl = new URL(\n        '/src/images/img/mobile/default-movie-img@2x.png',\n        import.meta.url\n      );\n    }\n\n    if (window.innerWidth >= 768 && window.innerWidth < 1280) {\n      posterUrl = new URL(\n        '/src/images/img/tablet/default-movie-img@2x.png',\n        import.meta.url\n      );\n    }\n\n    if (window.innerWidth >= 1280) {\n      posterUrl = new URL(\n        '/src/images/img/desktop/default-movie-img@2x.png',\n        import.meta.url\n      );\n    }\n  }\n\n  const markup = `\n    <div class=\"upcoming__thumb\">\n      <img class =\"upcoming__image\" src=\"${posterUrl}\" alt=\"${\n    title || original_title\n  }\" />\n    </div>\n\n    <div class=\"upcoming__meta\">\n      <h3 class=\"upcoming__caption\">${title || original_title}</h3>\n      \n      \n      <div class=\"upcoming__ctx\">\n        <ul class=\"upcoming__list\">\n          <li class=\"upcoming__item\">\n            <div class=\"upcoming__desc\">Release date</div>\n            <div class=\"upcoming__date\">${release_date.slice(0, 4)}</div>\n          </li>\n          <li class=\"upcoming__item\">\n            <div class=\"upcoming__desc\">Vote / Votes</div>\n            <div class=\"upcoming__value\">\n              <span class=\"tag\">\n                ${vote_average.toFixed(1)}\n              </span>\n              &nbsp;/&nbsp;\n              <span class=\"tag\">\n                ${vote_count}\n              </span>\n            </div>\n          </li>\n        </ul>\n        <ul class=\"upcoming__list\">\n          <li class=\"upcoming__item\">\n            <div class=\"upcoming__desc\">Popularity</div>\n            <div class=\"upcoming__value\">${popularity.toFixed(1)}</div>\n          </li>\n          <li class=\"upcoming__item\">\n            <div class=\"upcoming__desc\">Genre</div>\n            <div class=\"upcoming__value\">${genres}</div>\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"upcoming__about\">\n        <h3 class=\"upcoming__subtitle\">About</h3>\n        <p class=\"upcoming__text\">${overview}</p>\n      </div>\n\n      <button class=\"btn btn--primary\" data-movie-id=\"${id}\" data-lable=\"upcoming\" type=\"button\">\n        Add to my library\n      </button>\n    </div>`;\n\n  return markup;\n};\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7x1mF\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"fGxZZ\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"4W3Ib\")).toString();"],"names":["parcelRequire","register","JSON","parse","$dSs1Y","$iHGmp","$584431544619dc6d$export$c1bd8589e23794f0","movies","indexList","window","innerWidth","randomIndex","map","index","$6tYrs","movieListMarkup","join","$f0c700fa2b7f04ed$var$handlerMovieListClick","e","closestId","target","closest","movieId","dataset","$jV0Ik","openMovieInfoModal","async","Loading","standard","className","backgroundColor","svgColor","results","$lCN0J","fetchTrendingMoviesByWeek","$krGWQ","refs","movieList","innerHTML","addEventListener","error","console","log","remove","$f0c700fa2b7f04ed$export$39585ff98928de2a","$8RzAb","$bb1504d0116a06c0$exports","URL","resolve","import","meta","url","toString","$f0fb537ffbede65e$exports","$679ec6db0c8d2c64$exports","$65213d0054f6b397$export$ab44ec6c9ee51747","movie","id","title","original_title","vote_average","vote_count","popularity","overview","genre_ids","poster_path","backdrop_path","release_date","posterUrl","genres","getGenreNames","slice","toFixed","fetchUpcomingMovies","upcomingContainer","upcomingBtn","document","querySelector","$5utJa","initAddToLibraryBtn","$5e9a13ffe5a1bfbe$export$d13d1cf316ef3ba9"],"version":3,"file":"index.a34f12a7.js.map"}